# Setting up the logging to read this configuration file:
#-Djava.util.logging.config.file=config/logging.properties
#System.setProperty("java.util.logging.config.file", "config/logging.properties");

# The ConsoleHandler outputs messages on std.err
.handlers= java.util.logging.ConsoleHandler

# Multiple handlers are also allowed.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Festlegen des Standard Loglevels
.level= INFO


############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# Die Nachrichten in eine Datei im Benutzerverzeichnis schreiben
java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.limit = 50000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter

# Tells the SimpleFormatter to output timestamp and method name on one line.
java.util.logging.SimpleFormatter.format=%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$-6s %2$s -> %5$s%6$s%n

# Zusätzlich zu den normalen Logleveln kann für jeden Handler noch ein eigener Filter 
# vergeben werden. Das ist nützlich wenn beispielsweise alle Nachrichten auf der Konsole ausgeben werden sollen
# aber nur ab INFO in das Logfile geschrieben werden soll.
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter


############################################################
# Settings for separate loggers.
############################################################

# Für einzelne Logger kann ein eigenes Loglevel festgelegt werden.
p2p.Client.loggingapi.level = FINEST
p2p.Client.assertions.level = SEVERE
threads.Waiter.loggingapi.level = FINEST
threads.Waiter.assertions.level = SEVERE